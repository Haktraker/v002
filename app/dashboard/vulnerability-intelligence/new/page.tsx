'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { useCreateVulnerabilityIntelligence } from '@/lib/api/endpoints/vulnerability-intelligence';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { toast } from 'sonner';
import { CreateVulnerabilityIntelligenceDto, VulnerabilitySeverity, VulnerabilityStatus } from '@/lib/api/types';
import { ArrowLeft, Upload, Home, Plus, X } from 'lucide-react';
import { useTableData } from '@/hooks/useTableData';
import Link from 'next/link';
import { useApiLoading } from '@/lib/utils/api-utils';
import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbSeparator,
} from "@/components/ui/breadcrumb";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { FileUpload } from '@/components/ui/file-upload';

export default function VulnerabilityIntelligenceNew() {
  const router = useRouter();
  const createVulnerabilityIntelligence = useCreateVulnerabilityIntelligence();
  const { withLoading } = useApiLoading();
  
  // State for single entry form
  const [formData, setFormData] = useState<CreateVulnerabilityIntelligenceDto>({
    vulnerabilityID: '',
    description: '',
    severity: 'medium',
    affectedSystems: '',
    impact: '',
    cvsScore: '',
    exploitAvailability: '',
    patchAvailability: '',
    vendor: '',
    mitigationSteps: '',
    status: 'unresolved',
    references: [],
    detectionTime: new Date().toISOString().split('T')[0],
  });
  
  const [newReference, setNewReference] = useState('');
  
  const validateRow = (row: CreateVulnerabilityIntelligenceDto) => {
    if (!row.vulnerabilityID || !row.description || !row.affectedSystems || 
        !row.impact || !row.cvsScore || !row.vendor) {
      return {
        isValid: false,
        error: `Missing required fields`
      };
    }
    
    const severityOptions: VulnerabilitySeverity[] = ['low', 'medium', 'high', 'critical'];
    if (row.severity && !severityOptions.includes(row.severity as VulnerabilitySeverity)) {
      return {
        isValid: false,
        error: `Invalid severity: ${row.severity}. Valid options are: ${severityOptions.join(', ')}`
      };
    }
    
    const statusOptions: VulnerabilityStatus[] = ['investigating', 'resolved', 'unresolved'];
    if (row.status && !statusOptions.includes(row.status as VulnerabilityStatus)) {
      return {
        isValid: false,
        error: `Invalid status: ${row.status}. Valid options are: ${statusOptions.join(', ')}`
      };
    }
    
    return { isValid: true };
  };

  // Table data handling with custom hook
  const {
    data: csvData,
    isProcessing,
    isSubmitting,
    csvFile,
    handleFileChange,
    handleProcessCSV,
    resetData,
    setIsSubmitting,
    currentPageData,
    pagination,
    totalPages,
    nextPage,
    previousPage,
    goToPage,
    sortConfig,
    handleSort,
  } = useTableData<CreateVulnerabilityIntelligenceDto>({
    requiredFields: ['vulnerabilityID', 'description', 'severity', 'affectedSystems', 'impact', 'cvsScore', 'vendor'],
    validateRow,
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await withLoading(async () => {
        await createVulnerabilityIntelligence.mutateAsync(formData);
        toast.success('Vulnerability intelligence entry created successfully');
        router.push('/dashboard/vulnerability-intelligence');
      });
    } catch (error) {
      console.error('Failed to create vulnerability intelligence entry:', error);
      toast.error('Failed to create vulnerability intelligence entry');
    }
  };

  const handleBulkSubmit = async () => {
    if (!csvData.length) {
      toast.error('No data to submit');
      return;
    }

    setIsSubmitting(true);
    let successCount = 0;
    let errorCount = 0;

    try {
      await withLoading(async () => {
        for (const row of csvData) {
          try {
            await createVulnerabilityIntelligence.mutateAsync(row);
            successCount++;
          } catch (error) {
            console.error('Failed to create vulnerability intelligence entry:', error);
            errorCount++;
          }
        }

        if (successCount > 0) {
          toast.success(`Successfully created ${successCount} entries${errorCount > 0 ? `, ${errorCount} failed` : ''}`);
          router.push('/dashboard/vulnerability-intelligence');
        } else {
          toast.error('Failed to create any entries');
        }
      });
    } catch (error) {
      console.error('Bulk submission failed:', error);
      toast.error('Bulk submission process failed');
    } finally {
      setIsSubmitting(false);
    }
  };

  const addReference = () => {
    if (newReference.trim() && !formData.references?.includes(newReference.trim())) {
      setFormData({
        ...formData,
        references: [...(formData.references || []), newReference.trim()]
      });
      setNewReference('');
    }
  };

  const removeReference = (index: number) => {
    const updatedReferences = [...(formData.references || [])];
    updatedReferences.splice(index, 1);
    setFormData({
      ...formData,
      references: updatedReferences
    });
  };

  const handleFileUploadComplete = (url: string) => {
    setFormData({
      ...formData,
      sampleFile: url
    });
    toast.success('File uploaded successfully');
  };

  const severityOptions: VulnerabilitySeverity[] = [
    'low',
    'medium',
    'high',
    'critical'
  ];

  const statusOptions: VulnerabilityStatus[] = [
    'investigating',
    'resolved',
    'unresolved'
  ];

  return (
    <div className="p-6">
      <Breadcrumb>
        <BreadcrumbList>
          <BreadcrumbItem>
            <BreadcrumbLink href="/dashboard" className="flex items-center gap-2">
              <Home className="h-4 w-4" />
              Dashboard
            </BreadcrumbLink>
          </BreadcrumbItem>
          <BreadcrumbSeparator />
          <BreadcrumbItem>
            <BreadcrumbLink href="/dashboard/vulnerability-intelligence">Vulnerability Intelligence</BreadcrumbLink>
          </BreadcrumbItem>
          <BreadcrumbSeparator />
          <BreadcrumbItem>
            <BreadcrumbLink href="/dashboard/vulnerability-intelligence/new" className="font-semibold">
              Add New Entry
            </BreadcrumbLink>
          </BreadcrumbItem>
        </BreadcrumbList>
      </Breadcrumb>

      <div className="flex items-center gap-4 my-6">
        <Link href="/dashboard/vulnerability-intelligence">
          <Button variant="outline" size="icon">
            <ArrowLeft className="h-4 w-4" />
          </Button>
        </Link>
        <h1 className="text-2xl font-semibold">Add New Vulnerability Intelligence Entry</h1>
      </div>

      <Tabs defaultValue="single" className="w-full">
        <TabsList>
          <TabsTrigger value="single">Single Entry</TabsTrigger>
          <TabsTrigger value="bulk">Bulk Upload</TabsTrigger>
        </TabsList>

        <TabsContent value="single">
          <Card>
            <form onSubmit={handleSubmit}>
              <CardHeader>
                <CardTitle>Add Single Entry</CardTitle>
                <CardDescription>
                  Enter the details for a single vulnerability intelligence entry.
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="vulnerabilityID">Vulnerability ID</Label>
                    <Input
                      id="vulnerabilityID"
                      value={formData.vulnerabilityID}
                      onChange={(e) => setFormData({ ...formData, vulnerabilityID: e.target.value })}
                      placeholder="e.g., CVE-2023-12345"
                      required
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="severity">Severity</Label>
                    <Select
                      value={formData.severity}
                      onValueChange={(value) => setFormData({ ...formData, severity: value as VulnerabilitySeverity })}
                    >
                      <SelectTrigger id="severity">
                        <SelectValue placeholder="Select severity" />
                      </SelectTrigger>
                      <SelectContent>
                        {severityOptions.map((severity) => (
                          <SelectItem key={severity} value={severity}>
                            {severity.charAt(0).toUpperCase() + severity.slice(1)}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="cvsScore">CVS Score</Label>
                    <Input
                      id="cvsScore"
                      value={formData.cvsScore}
                      onChange={(e) => setFormData({ ...formData, cvsScore: e.target.value })}
                      placeholder="e.g., 8.5"
                      required
                    />
                  </div>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="vendor">Vendor</Label>
                    <Input
                      id="vendor"
                      value={formData.vendor}
                      onChange={(e) => setFormData({ ...formData, vendor: e.target.value })}
                      placeholder="e.g., Microsoft"
                      required
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="status">Status</Label>
                    <Select
                      value={formData.status}
                      onValueChange={(value) => setFormData({ ...formData, status: value as VulnerabilityStatus })}
                    >
                      <SelectTrigger id="status">
                        <SelectValue placeholder="Select status" />
                      </SelectTrigger>
                      <SelectContent>
                        {statusOptions.map((status) => (
                          <SelectItem key={status} value={status}>
                            {status.charAt(0).toUpperCase() + status.slice(1)}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="detectionTime">Detection Time</Label>
                    <Input
                      id="detectionTime"
                      type="date"
                      value={formData.detectionTime}
                      onChange={(e) => setFormData({ ...formData, detectionTime: e.target.value })}
                    />
                  </div>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="exploitAvailability">Exploit Availability</Label>
                    <Input
                      id="exploitAvailability"
                      value={formData.exploitAvailability}
                      onChange={(e) => setFormData({ ...formData, exploitAvailability: e.target.value })}
                      placeholder="e.g., Proof of Concept available"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="patchAvailability">Patch Availability</Label>
                    <Input
                      id="patchAvailability"
                      value={formData.patchAvailability}
                      onChange={(e) => setFormData({ ...formData, patchAvailability: e.target.value })}
                      placeholder="e.g., Vendor patch available"
                    />
                  </div>
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="description">Description</Label>
                  <Textarea
                    id="description"
                    value={formData.description}
                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                    placeholder="Enter vulnerability description"
                    required
                    rows={3}
                  />
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="affectedSystems">Affected Systems</Label>
                  <Textarea
                    id="affectedSystems"
                    value={formData.affectedSystems}
                    onChange={(e) => setFormData({ ...formData, affectedSystems: e.target.value })}
                    placeholder="Enter affected systems"
                    required
                    rows={2}
                  />
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="impact">Impact</Label>
                  <Textarea
                    id="impact"
                    value={formData.impact}
                    onChange={(e) => setFormData({ ...formData, impact: e.target.value })}
                    placeholder="Enter potential impact"
                    required
                    rows={2}
                  />
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="mitigationSteps">Mitigation Steps</Label>
                  <Textarea
                    id="mitigationSteps"
                    value={formData.mitigationSteps}
                    onChange={(e) => setFormData({ ...formData, mitigationSteps: e.target.value })}
                    placeholder="Enter mitigation steps"
                    rows={3}
                  />
                </div>
                
                <div className="space-y-2">
                  <FileUpload 
                    label="Sample File"
                    path="vulnerability-samples"
                    maxSizeMB={10}
                    allowedTypes={['application/pdf', 'text/plain', 'application/zip', 'application/x-zip-compressed', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document']}
                    onUploadComplete={handleFileUploadComplete}
                  />
                </div>
                
                <div className="space-y-2">
                  <Label>References</Label>
                  <div className="flex gap-2">
                    <Input
                      value={newReference}
                      onChange={(e) => setNewReference(e.target.value)}
                      placeholder="Add reference URL"
                    />
                    <Button 
                      type="button" 
                      variant="outline" 
                      onClick={addReference}
                      disabled={!newReference.trim()}
                    >
                      <Plus className="h-4 w-4 mr-1" /> Add
                    </Button>
                  </div>
                  
                  {formData.references && formData.references.length > 0 && (
                    <div className="mt-2 space-y-2">
                      {formData.references.map((ref, index) => (
                        <div key={index} className="flex items-center gap-2 p-2 bg-muted rounded-md">
                          <span className="flex-1 text-sm truncate">{ref}</span>
                          <Button 
                            type="button" 
                            variant="ghost" 
                            size="icon"
                            onClick={() => removeReference(index)}
                          >
                            <X className="h-4 w-4" />
                          </Button>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              </CardContent>
              <CardFooter>
                <Button type="submit" disabled={createVulnerabilityIntelligence.isPending}>
                  {createVulnerabilityIntelligence.isPending ? 'Creating...' : 'Create Entry'}
                </Button>
              </CardFooter>
            </form>
          </Card>
        </TabsContent>

        <TabsContent value="bulk">
          <Card>
            <CardHeader>
              <CardTitle>Bulk Upload</CardTitle>
              <CardDescription>
                Upload a CSV file with multiple vulnerability intelligence entries.
                <br />
                <small className="text-muted-foreground">
                  Required fields: vulnerabilityID, description, severity, affectedSystems, impact, cvsScore, vendor
                </small>
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="flex items-center gap-4">
                  <Input
                    type="file"
                    accept=".csv"
                    onChange={handleFileChange}
                    disabled={isProcessing || isSubmitting}
                  />
                  <Button
                    type="button"
                    onClick={handleProcessCSV}
                    disabled={!csvFile || isProcessing || isSubmitting}
                  >
                    <Upload className="mr-2 h-4 w-4" />
                    Process CSV
                  </Button>
                </div>

                {csvData.length > 0 && (
                  <div className="space-y-4">
                    <div className="border rounded-lg overflow-hidden overflow-x-auto">
                      <table className="min-w-full divide-y divide-gray-200">
                        <thead className="bg-gray-50">
                          <tr>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Vulnerability ID
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Severity
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Vendor
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Status
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Description
                            </th>
                          </tr>
                        </thead>
                        <tbody className="bg-white divide-y divide-gray-200">
                          {currentPageData.map((row, index) => (
                            <tr key={index}>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                {row.vulnerabilityID}
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                {row.severity}
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                {row.vendor}
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                {row.status || 'unresolved'}
                              </td>
                              <td className="px-6 py-4 text-sm text-gray-900 max-w-xs truncate">
                                {row.description}
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>

                    <div className="flex justify-between items-center">
                      <div className="text-sm text-gray-500">
                        Page {pagination.currentPage} of {totalPages}
                      </div>
                      <div className="flex gap-2">
                        <Button
                          variant="outline"
                          onClick={previousPage}
                          disabled={pagination.currentPage === 1}
                        >
                          Previous
                        </Button>
                        <Button
                          variant="outline"
                          onClick={nextPage}
                          disabled={pagination.currentPage === totalPages}
                        >
                          Next
                        </Button>
                      </div>
                    </div>

                    <div className="flex justify-end gap-2">
                      <Button
                        variant="outline"
                        onClick={resetData}
                        disabled={isSubmitting}
                      >
                        Reset
                      </Button>
                      <Button
                        onClick={handleBulkSubmit}
                        disabled={isSubmitting}
                      >
                        {isSubmitting ? 'Submitting...' : 'Submit All'}
                      </Button>
                    </div>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}
