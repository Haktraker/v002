import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';
import { apiClient } from '../config';
import { 
  ApiResponse, 
  VulnerabilityIntelligence,
  CreateVulnerabilityIntelligenceDto,
  UpdateVulnerabilityIntelligenceDto,
  VulnerabilityIntelligenceQueryParams
} from '../types';
import { showToast } from '@/lib/utils/toast-utils';
import { useApiLoading } from '@/lib/utils/api-utils';

// API Keys for Vulnerability Intelligence
export const VULNERABILITY_INTELLIGENCE_KEYS = {
  // Vulnerability Intelligence
  vulnerabilityIntelligenceLists: () => ['vulnerabilityIntelligences'] as const,
  vulnerabilityIntelligenceDetail: (id: string) => ['vulnerabilityIntelligences', id] as const,
  
  // All lists
  lists: () => ['vulnerabilityIntelligenceLists'] as const,
};

// Base URL for all vulnerability intelligence endpoints
const BASE_URL = '/vulnerabilities-intelligences';

// ==================== Vulnerability Intelligence ====================

// Get all vulnerability intelligence items
export const useGetVulnerabilityIntelligences = (params?: VulnerabilityIntelligenceQueryParams) => {
  const { withLoading } = useApiLoading();
  
  return useQuery({
    queryKey: VULNERABILITY_INTELLIGENCE_KEYS.vulnerabilityIntelligenceLists(),
    queryFn: async () => {
      const response = await withLoading(() => apiClient.get<ApiResponse<VulnerabilityIntelligence[]>>(BASE_URL, { params }));
      return response.data.data;
    },
    staleTime: 5 * 60 * 1000 // 5 minutes
  });
};

// Get vulnerability intelligence by ID
export const useGetVulnerabilityIntelligenceById = (id: string) => {
  const { withLoading } = useApiLoading();
  
  return useQuery({
    queryKey: VULNERABILITY_INTELLIGENCE_KEYS.vulnerabilityIntelligenceDetail(id),
    queryFn: async () => {
      const response = await withLoading(() => apiClient.get<ApiResponse<VulnerabilityIntelligence>>(`${BASE_URL}/${id}`));
      return response.data.data;
    },
    enabled: !!id,
    staleTime: 5 * 60 * 1000 // 5 minutes
  });
};

// Create vulnerability intelligence
export const useCreateVulnerabilityIntelligence = () => {
  const queryClient = useQueryClient();
  const { withLoading } = useApiLoading();

  return useMutation({
    mutationFn: async (newVulnerabilityIntelligence: CreateVulnerabilityIntelligenceDto) => {
      const response = await withLoading(() => apiClient.post<ApiResponse<VulnerabilityIntelligence>>(BASE_URL, newVulnerabilityIntelligence));
      return response.data.data;
    },
    onSuccess: (data) => {
      showToast('Vulnerability intelligence created successfully', 'success');
      queryClient.invalidateQueries({ queryKey: VULNERABILITY_INTELLIGENCE_KEYS.vulnerabilityIntelligenceLists() });
      queryClient.invalidateQueries({ queryKey: VULNERABILITY_INTELLIGENCE_KEYS.lists() });
    },
    onError: (error: any) => {
      console.error('Failed to create vulnerability intelligence:', error);
      showToast('Failed to create vulnerability intelligence', 'error');
    },
  });
};

// Update vulnerability intelligence
export const useUpdateVulnerabilityIntelligence = () => {
  const queryClient = useQueryClient();
  const { withLoading } = useApiLoading();

  return useMutation({
    mutationFn: async ({ id, ...updateData }: UpdateVulnerabilityIntelligenceDto & { id: string }) => {
      const response = await withLoading(() => apiClient.patch<ApiResponse<VulnerabilityIntelligence>>(`${BASE_URL}/${id}`, updateData));
      return response.data.data;
    },
    onSuccess: (_, variables) => {
      showToast('Vulnerability intelligence updated successfully', 'success');
      queryClient.invalidateQueries({ queryKey: VULNERABILITY_INTELLIGENCE_KEYS.vulnerabilityIntelligenceDetail(variables.id) });
      queryClient.invalidateQueries({ queryKey: VULNERABILITY_INTELLIGENCE_KEYS.vulnerabilityIntelligenceLists() });
      queryClient.invalidateQueries({ queryKey: VULNERABILITY_INTELLIGENCE_KEYS.lists() });
    },
    onError: (error: any) => {
      console.error('Failed to update vulnerability intelligence:', error);
      showToast('Failed to update vulnerability intelligence', 'error');
    },
  });
};

// Delete vulnerability intelligence
export const useDeleteVulnerabilityIntelligence = () => {
  const queryClient = useQueryClient();
  const { withLoading } = useApiLoading();

  return useMutation({
    mutationFn: async (id: string) => {
      const response = await withLoading(() => apiClient.delete<ApiResponse<null>>(`${BASE_URL}/${id}`));
      return response.data;
    },
    onSuccess: (_, id) => {
      showToast('Vulnerability intelligence deleted successfully', 'success');
      queryClient.removeQueries({ queryKey: VULNERABILITY_INTELLIGENCE_KEYS.vulnerabilityIntelligenceDetail(id) });
      queryClient.invalidateQueries({ queryKey: VULNERABILITY_INTELLIGENCE_KEYS.vulnerabilityIntelligenceLists() });
      queryClient.invalidateQueries({ queryKey: VULNERABILITY_INTELLIGENCE_KEYS.lists() });
    },
    onError: (error: any) => {
      console.error('Failed to delete vulnerability intelligence:', error);
      showToast('Failed to delete vulnerability intelligence', 'error');
    },
  });
};
